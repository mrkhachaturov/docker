services:
  netbox: &netbox
    image: docker.io/netboxcommunity/netbox:${VERSION-v4.2-3.2.1}
    depends_on:
      - postgres
      - redis
      - redis-cache
    # env_file: env/netbox.env
    networks:
      bond0.1140:
        ipv4_address: ${VLAN_1140}.246
    ports:
    - 8000:8080    
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
      CORS_ORIGIN_ALLOW_ALL: "True"
      DB_HOST: "postgres"
      DB_NAME: ${POSTGRES_DB}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_USER: ${POSTGRES_USER}
      EMAIL_FROM: "netbox@bar.com"
      EMAIL_PASSWORD:
      EMAIL_PORT: "25"
      EMAIL_SERVER: "localhost"
      EMAIL_SSL_CERTFILE:
      EMAIL_SSL_KEYFILE:
      EMAIL_TIMEOUT: "5"
      EMAIL_USERNAME: "netbox"
      EMAIL_USE_SSL: "false"
      EMAIL_USE_TLS: "false"
      GRAPHQL_ENABLED: "true"
      HOUSEKEEPING_INTERVAL: "86400"
      MEDIA_ROOT: "/opt/netbox/netbox/media"
      METRICS_ENABLED: "false"
      REDIS_CACHE_DATABASE: "1"
      REDIS_CACHE_HOST: "redis-cache"
      REDIS_CACHE_INSECURE_SKIP_TLS_VERIFY: "false"
      REDIS_CACHE_PASSWORD: ${REDIS_CACHE_PASSWORD}
      REDIS_CACHE_SSL: "false"
      REDIS_DATABASE: "0"
      REDIS_HOST: "redis"
      REDIS_INSECURE_SKIP_TLS_VERIFY: "false"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_SSL: "false"
      RELEASE_CHECK_URL: "https://api.github.com/repos/netbox-community/netbox/releases"
      SECRET_KEY: ${SECRET_KEY}
      SKIP_SUPERUSER: "false"
      SUPERUSER_EMAIL: ${SUPERUSER_EMAIL}
      SUPERUSER_NAME: ${SUPERUSER_NAME}
      SUPERUSER_PASSWORD: ${SUPERUSER_PASSWORD}
      WEBHOOKS_ENABLED: "true"
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.netbox-rtr.entrypoints=websecure"
      - "traefik.http.routers.netbox-rtr.rule=Host(`netbox.${DOMAIN1}.net`)"
      # - "traefik.http.routers.netbox-rtr.tls=true"
      # Middlewares
      # - "traefik.http.routers.netbox-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.netbox-rtr.service=netbox-svc"
      - "traefik.http.services.netbox-svc.loadbalancer.server.port=8080"  
    # user: "unit:root"
    healthcheck:
      test: curl -f http://localhost:8080/login/ || exit 1
      start_period: 90s
      timeout: 3s
      interval: 15s
    volumes:
      - ${DOCKERDIR}/appdata/netbox/configuration:/etc/netbox/config:z,ro
      - ${DOCKERDIR}/appdata/netbox/netbox-media-files:/opt/netbox/netbox/media:rw
      - ${DOCKERDIR}/appdata/netbox/netbox-reports-files:/opt/netbox/netbox/reports:rw
      - ${DOCKERDIR}/appdata/netbox/netbox-scripts-files:/opt/netbox/netbox/scripts:rw
  netbox-worker:
    <<: *netbox
    depends_on:
      netbox:
        condition: service_healthy
    networks:
      bond0.1140:
        ipv4_address: ${VLAN_1140}.244    
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker
    healthcheck:
      test: ps -aux | grep -v grep | grep -q rqworker || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s
  netbox-housekeeping:
    <<: *netbox
    depends_on:
      netbox:
        condition: service_healthy
    networks:
      bond0.1140:
        ipv4_address: ${VLAN_1140}.243    
    command:
      - /opt/netbox/housekeeping.sh
    healthcheck:
      test: ps -aux | grep -v grep | grep -q housekeeping || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s

  # postgres
  postgres:
    image: docker.io/postgres:18-alpine@sha256:f898ac406e1a9e05115cc2efcb3c3abb3a92a4c0263f3b6f6aaae354cbb1953a
    healthcheck:
      test: pg_isready -q -t 2 -d $$POSTGRES_DB -U $$POSTGRES_USER
      start_period: 20s
      timeout: 30s
      interval: 10s
      retries: 5
    # env_file: env/postgres.env
    networks:
      bond0.1140:
        ipv4_address: ${VLAN_1140}.242
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - ${DOCKERDIR}/appdata/netbox/netbox-postgres-data:/var/lib/postgresql/data

  # redis
  redis:
    image: docker.io/valkey/valkey:9.0-alpine@sha256:cfd0b43b2fe9da70ab78c9771f4dfe91fa1a9fa823575f32701677d08207097c
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    healthcheck: &redis-healthcheck
      test: '[ $$(valkey-cli --pass "$${REDIS_PASSWORD}" ping) = ''PONG'' ]'
      start_period: 5s
      timeout: 3s
      interval: 1s
      retries: 5
    # env_file: env/redis.env
    networks:
      bond0.1140:
        ipv4_address: ${VLAN_1140}.241
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ${DOCKERDIR}/appdata/netbox/netbox-redis-data:/data
  redis-cache:
    image: docker.io/valkey/valkey:9.0-alpine@sha256:cfd0b43b2fe9da70ab78c9771f4dfe91fa1a9fa823575f32701677d08207097c
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - valkey-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    healthcheck: *redis-healthcheck
    # env_file: env/redis-cache.env
    networks:
      bond0.1140:
        ipv4_address: ${VLAN_1140}.240
    environment:
      REDIS_PASSWORD: ${REDIS_CACHE_PASSWORD}
    volumes:
      - ${DOCKERDIR}/appdata/netbox/netbox-redis-cache-data:/data